/* eslint-disable react-refresh/only-export-components */
/* eslint-disable react/no-unknown-property */
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.7 public/assets/models/airplane.glb
*/

import { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber';
import { Matrix4, Quaternion, Vector3 } from 'three';
import { updatePlaneAxis } from '../helpers/controls';

// вектор поворота для аффиного презобрахования
const x = new Vector3(1, 0, 0);
const y = new Vector3(0, 1, 0);
const z = new Vector3(0, 0, 1);

// вектор положения на плоскости самолёта
export const planePosition = new Vector3(0, 3, 7);


// для сверической интерполяции 
const delayedRotMatrix = new Matrix4();
const delayedQuaternion = new Quaternion();

export function Airplane(props) {
	// thanks to:
	// https://sketchfab.com/3d-models/vintage-toy-airplane-7de2ecbc0acb4b1886c3df3d196c366b
	const { nodes, materials } = useGLTF('assets/models/airplane.glb');
	const groupRef = useRef();
	const helixMeshRef = useRef();

	// не самолёт движется по карте, а карта движется вокруг самолёта.
	// Самолёт неподвижен, в то время как карта подстраивается под самолёт при разлчиных движениях от пользоваетеля,
	//  движения происходит от других объектов

	// рендеринг кадров
	useFrame(({ camera }) => {
		updatePlaneAxis(x, y, z, planePosition, camera);

		// матрица поворота плоскости относительно самолёта 
		const rotMatrix = new Matrix4().makeBasis(x, y, z);

		// афинное преобрахование матрица смещения матрица поворота и матрица положения для правильного отображения самолёта на сцене
		const matrix = new Matrix4()
			.multiply(new Matrix4().makeTranslation(planePosition.x, planePosition.y, planePosition.z))
			.multiply(rotMatrix);

		groupRef.current.matrixAutoUpdate = false;
		groupRef.current.matrix.copy(matrix);
		groupRef.current.matrixWorldNeedsUpdate = true;

		// кватернионы для плавного вращения
		var quaternionA = new Quaternion().copy(delayedQuaternion);

		// внимание! установка кватерниона из матрицы вращения приведет к возникновению
		// проблем, напоминающих блокировки карданного подвеса, поэтому всегда используйте кватернионную систему счисления
		// // на протяжении всего этапа скольжения
		// quaternionA.setFromRotationMatrix(delayedRotMatrix);

		var quaternionB = new Quaternion();
		quaternionB.setFromRotationMatrix(rotMatrix);

		// с помощью кватерниона происходит задержка движения для реалистичности
		var interpolationFactor = 0.175;
		var interpolatedQuaternion = new Quaternion().copy(quaternionA);
		interpolatedQuaternion.slerp(quaternionB, interpolationFactor);
		delayedQuaternion.copy(interpolatedQuaternion);

		delayedRotMatrix.identity();
		delayedRotMatrix.makeRotationFromQuaternion(delayedQuaternion);

		// выбор положения камеры
		const cameraMatrix = new Matrix4()
			// (1 вектор): камера смотрит вперёд относительно нашего самолёта 
			.multiply(new Matrix4().makeTranslation(planePosition.x, planePosition.y, planePosition.z))
			.multiply(delayedRotMatrix)
			// (2 вектор): вращаем камеру вокруг оси x, чтобы она смотрел вниз под углома +-30   
			.multiply(new Matrix4().makeRotationX(-0.2))
			// (3 вектор): отдаляем камеру от нашего самолёта перпендиуляорно (2 вектору)
			.multiply(
				new Matrix4().makeTranslation(0, 0.015, 0.3)
			);

		camera.matrixAutoUpdate = false;
		camera.matrix.copy(cameraMatrix);
		camera.matrixWorldNeedsUpdate = true;

		helixMeshRef.current.rotation.z -= 1.0;
	});

	return (
		<>
			<group ref={groupRef}>
				<group {...props} dispose={null} scale={0.01} rotation-y={Math.PI}>
					<mesh geometry={nodes.supports.geometry} material={materials['Material.004']} />
					<mesh geometry={nodes.chassis.geometry} material={materials['Material.005']} />
					<mesh geometry={nodes.helix.geometry} material={materials['Material.005']} ref={helixMeshRef} />
				</group>
			</group>
		</>
	)
}

useGLTF.preload('assets/models/airplane.glb');
